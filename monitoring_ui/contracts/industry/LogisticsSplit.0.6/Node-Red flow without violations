[{"id":"7d0b6982.f2287","type":"inject","z":"19c3da7b.f55876","name":"","topic":"","payload":"","payloadType":"date","repeat":"60","crontab":"","once":false,"x":140,"y":154.75,"wires":[["1971dd8b.fb3952"]]},{"id":"1971dd8b.fb3952","type":"function","z":"19c3da7b.f55876","name":"GenerateAssetData","func":"context.set('asset1', 'CONT1000');\ncontext.set('asset2', 'CONT2000');\nvar assetID = \"\";\nvar minTemp = -10;\nvar maxTemp = 10;\nvar minHum = 30;\nvar maxHum = 70;\nvar minLight = 0;\nvar maxLight = 80;\nvar acceleration = 100;\nvar minO2 = 5;\nvar maxO2 = 10;\nvar maxCO2 = 5;\nvar maxC2H4 = 1.5;\n\n// Toss to decide which asset data to generate\n\n// Legitimate latitude range is +/- 90\n// Legitimate longitude range is +/- 180\n// We are setting the valid temperature range for this asset at +/- 10 degree celcius\nvar newLat = Math.round(getRandomArbitrary(16,42)*100/100);\nvar newLong = Math.round(getRandomArbitrary(-0.3,70)*100/100);\nvar newTemp = Math.round(getRandomArbitrary(minTemp, maxTemp)*100/100);\nvar newHum = Math.round(getRandomArbitrary(minHum, maxHum)*100/100);\nvar newLight= Math.round(getRandomArbitrary(minLight, maxLight)*100/100);\nvar newO2 =  Math.round(getRandomArbitrary(minO2, maxO2)*100/100);\nvar newCO2 = Math.floor(Math.random() * maxCO2);\nvar newC2H4 = Math.floor(Math.random() * maxC2H4);\nvar doorOpenFlag = \"N\";\nvar newTime = newDate();\nif (toss()) {\n    // Send the first asset\n    //assetID=context.asset1;\n    assetID=\"CONT1000\";\n} else {\n    // Send the second asset\n    //assetID=context.asset2;\n    assetID=\"CONT2000\";\n}\ndoorOpenFlag =\"N\";\nnewTime = newDate();\n\n\n/*\nif (toss()) {\n\n// Introducing randomness in the data\n    doorOpenFlag = biasedtoss()==1 ? \"Y\" : \"N\";\n    newTime = biasedtoss()===0 ? randomDate(): newDate();\n    newTemp = biasedtoss()===0?(newTemp+minTemp) : newTemp; // if toss is 1, violation ensured\n    newHum = biasedtoss()===0?(newHum+minHum) : newHum;\n    newLight = biasedtoss()===0?(newLight+minLight) : newLight; // just mixing it up\n    newO2 = biasedtoss()===0? newO2:(minO2 -newO2); // Higher value of oxygen is ok, lower is a problem\n    newCO2 = biasedtoss()===0?(newCO2+maxCO2/2) : newCO2;\n    newC2H4 = biasedtoss()===0?(newC2H4+minTemp) : newC2H4;\n}\n*/\nmsg = {\n    payload: JSON.stringify(\n    {\n     \"assetID\":assetID,\n     \"time\" : newTime,\n     \"location\":{\"latitude\":newLat, \"longitude\":newLong},\n     \"temperature\":newTemp,\n     \"humidity\":newHum,\n     \"dooropenflag\" : doorOpenFlag,\n     \"light\":newLight,\n     \"airquality\":{\"oxygen\":newO2, \"carbondioxide\":newCO2, \"ethylene\":newC2H4},\n     \"carrier\":\"Aramex\"\n    }\n )\n};\nreturn msg;\n\n\n//////////////////////\n// Returns a random time - for outlier scenarios\nfunction randomDate() {\n    var startDate = new Date('01/01/2016');\n    var endDate = new Date('01/01/2017');\n    var date = new Date(+startDate + Math.random() * (endDate - startDate));\n    //var msTime = date.getTime(); \n    var myTime = date.toString(); \n    //console.log(\"ms time is \", msTime)\n    return myTime;\n}\n\n\n////////////////////\n// Returns the current time\nfunction newDate() {\n    var d = new Date();\n    var myTime = d.toString(); \n    //console.log(\"ms time is \", msTime)\n    return myTime;\n}\n///////////////////////\n// A simple 'coin toss' to decide between two options\n// Binary toss, to decide which device record to send.\nfunction toss() {\n    answer = Math.round(Math.random());\n    return answer;\n}\n///////////////////////\n// A biased 'coin toss' that returns true if \n//random number is <0.75\nfunction biasedtoss() {\n    result1 = toss()?1:0;\n    result2 = toss()?result1+1:result1+0;\n    result3 = toss()?result2+1:result2+0;\n    result4 = toss()?result3+1:result3+0;\n    answer= result4 >=3?1:0;\n    return answer;\n}\n////////////////////////\n//Random arbitrary number generator\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}","outputs":1,"noerr":0,"x":344,"y":146.25,"wires":[["5b501ee1.2cf82","848ff4fd.af1c28"]]},{"id":"5b501ee1.2cf82","type":"debug","z":"19c3da7b.f55876","name":"","active":true,"console":"false","complete":"payload","x":623,"y":99,"wires":[]},{"id":"848ff4fd.af1c28","type":"ibmiot out","z":"19c3da7b.f55876","authentication":"apiKey","apiKey":"4bf7062f.81c458","outputType":"evt","deviceId":"PoD","deviceType":"PoD","eventCommandType":"pod","format":"json","data":"{\"assetID\":\"CONT0001\",\"time\":\"Wed Aug 10 2016 23:00:42 GMT+0000 (UTC)\",\"location\":{\"latitude\":-79,\"longitude\":-140},\"temperature\":6,\"humidity\":35,\"dooropenflag\":\"N\",\"light\":34,\"airquality\":{\"oxygen\":8,\"carbondioxide\":2,\"ethylene\":1}}","qos":0,"name":"PoD","service":"registered","x":603.5,"y":218,"wires":[]},{"id":"4bf7062f.81c458","type":"ibmiot","z":"19c3da7b.f55876","name":"PoDAPIKey","keepalive":"60","cleansession":true}]
