{
    "swagger": "2.0",
    "info": {
        "version": "3.1",
        "title": "IBM IoT Blockchain Trade Lane Sample Contract API",
        "description": "Interact with the API and schema for IoT trade lane sample contract. Based on the CRUD contract pattern, which is implemented as a pseudo-RPC payload in the chain code inputs (function string and args string array) of the deploy, invoke and query end points. Similar in concept to a JSON-RPC encoding. Note that the interface shown in this schema defines the chaincode inputs as an array of objects, but those objects are always in fact a single JSON encoded string. The sections before Definitions are redacted versions of the rest_api.json file in the Open Block Chain project. This schema builds on the paths by defining the payloads for the devops resource APIs. This file can be explored in the Swagger GUI, but it throws an error on the choice verb 'oneOf', which is very useful for defining payloads related to one endpoint, such as query. This schema uses references everywhere to avoid data duplication, but the generate command runs a script that can resolve all references and create a schema with all data fully realized."
    },
    "host": "127.0.0.1:3000",
    "schemes": [
        "http"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/chaincode": {
            "post": {
                "summary": "Service endpoint for Chaincode operations",
                "description": "The /chaincode endpoint receives requests to deploy, invoke, and query a target Chaincode. This service endpoint implements the JSON RPC 2.0 specification with the payload identifying the desired Chaincode operation within the 'method' property.",
                "tags": [
                    "Chaincode"
                ],
                "operationId": "chaincodeOp",
                "parameters": [{
                    "name": "ChaincodeOpPayload",
                    "in": "body",
                    "description": "Chaincode JSON RPC 2.0 payload",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/ChaincodeOpPayload"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Chaincode operation successful",
                        "schema": {
                            "$ref": "#/definitions/ChaincodeOpSuccess"
                        }
                    },
                    "default": {
                        "description": "Chaincode operation failed",
                        "schema": {
                            "$ref": "#/definitions/ChaincodeOpFailure"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ChaincodeOpPayload": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "method": {
                 "type": "string",
                 "enum": ["deploy", "invoke", "query"],
                 "description": "the command's service endpoint for deployment, invocation or query"
              },
              "params": {
                  "$ref": "#/definitions/ChaincodeSpec",
                  "description": "A required Chaincode specification message identifying the target chaincode."
              },
              "id": {
                 "type": "integer",
                 "format": "int64",
                 "description": "An integer number used to correlate the request and response objects. If it is not included, the request is assumed to be a notification and the server will not generate a response."
              }
           },
           "required": [
              "jsonrpc",
              "method",
              "params",
              "id"
           ]
        },
        "ConfidentialityLevel":{
            "type": "string",
            "default": "PUBLIC",
            "example": "PUBLIC",
            "enum":[
                "PUBLIC",
                "CONFIDENTIAL"
              ],
            "description": "Confidentiality level of the Chaincode."
        },
        "ChaincodeSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "default": "GOLANG",
                    "example": "GOLANG",
                    "enum":[
                        "UNDEFINED",
                        "GOLANG",
                        "NODE"
                    ],
                    "description": "Chaincode specification language."
                },
                "chaincodeID": {
                    "$ref": "#/definitions/ChaincodeID",
                    "description": "Unique Chaincode identifier."
                },
                "ctorMsg": {
                    "$ref": "#/definitions/ChaincodeInput",
                    "description": "Specific function to execute within the Chaincode."
                },
                "secureContext": {
                    "type": "string",
                    "description": "Username when security is enabled."
                },
                "confidentialityLevel": {
                    "$ref": "#/definitions/ConfidentialityLevel",
                    "description": "Confidentiality level of the Chaincode."
                }
            }
        },
        "ChaincodeID": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Chaincode location in the file system. This value is required by the deploy transaction."
                },
                "name": {
                    "type": "string",
                    "description": "Chaincode name identifier. This value is required by the invoke and query transactions."
                }
            }
        },
        "ChaincodeInput": {
            "type": "object",
            "description": "the payload for a deploy, invoke or query message",
            "oneOf": [
                {
                    "$ref": "#/definitions/ChaincodeInputDeploy"
                },
                {
                    "$ref": "#/definitions/ChaincodeInputInvoke"
                },
                {
                    "$ref": "#/definitions/ChaincodeInputQuery"
                }
            ]
        },
        "ChaincodeInputDeploy": {
            "type": "object",
            "description": "the payload for a deploy message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/init"
                }
            ]
        },
        "ChaincodeInputInvoke": {
            "type": "object",
            "description": "the payload for an invoke message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/createAssetAirline"
                },
                {
                    "$ref": "#/definitions/API/createAssetAircraft"
                },
                {
                    "$ref": "#/definitions/API/createAssetAssembly"
                },
                {
                    "$ref": "#/definitions/API/updateAssetAirline"
                },
                {
                    "$ref": "#/definitions/API/updateAssetAircraft"
                },
                {
                    "$ref": "#/definitions/API/updateAssetAssembly"
                },
                {
                    "$ref": "#/definitions/API/deleteAssetAirline"
                },
                {
                    "$ref": "#/definitions/API/deleteAssetAircraft"
                },
                {
                    "$ref": "#/definitions/API/deleteAssetAssembly"
                },
                {
                    "$ref": "#/definitions/API/deletePropertiesFromAssetAirline"
                },
                {
                    "$ref": "#/definitions/API/deletePropertiesFromAssetAircraft"
                },
                {
                    "$ref": "#/definitions/API/deletePropertiesFromAssetAssembly"
                },
                {
                    "$ref": "#/definitions/API/setLoggingLevel"
                },
                {
                    "$ref": "#/definitions/API/setCreateOnUpdate"
                },
                {
                    "$ref": "#/definitions/API/deleteAllAssetsAirline"
                },
                {
                    "$ref": "#/definitions/API/deleteAllAssetsAircraft"
                },
                {
                    "$ref": "#/definitions/API/deleteAllAssetsAssembly"
                }
            ]
        },
        "ChaincodeInputQuery": {
            "type": "object",
            "description": "the payload for a query message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/readAssetAirline"
                },
                {
                    "$ref": "#/definitions/API/readAssetAircraft"
                },
                {
                    "$ref": "#/definitions/API/readAssetAssembly"
                },
                {
                    "$ref": "#/definitions/API/readAllAssetsAirline"
                },
                {
                    "$ref": "#/definitions/API/readAllAssetsAircraft"
                },
                {
                    "$ref": "#/definitions/API/readAllAssetsAssembly"
                },
                {
                    "$ref": "#/definitions/API/readAssetAirlineHistory"
                },
                {
                    "$ref": "#/definitions/API/readAssetAircraftHistory"
                },
                {
                    "$ref": "#/definitions/API/readAssetAssemblyHistory"
                },
                {
                    "$ref": "#/definitions/API/readAssetSamples"
                },
                {
                    "$ref": "#/definitions/API/readAssetSchemas"
                },
                {
                    "$ref": "#/definitions/API/readRecentStates"
                },
                {
                    "$ref": "#/definitions/API/readContractState"
                }
            ]
        },
        "rpcResponse": {
           "type": "object",
           "properties": {
              "Status": {
                 "type": "string",
                 "default": "OK",
                 "description": "A string confirming successful request execution."
              },
              "Message": {
                 "type": "string",
                 "default": "500",
                 "description": "Additional information about the response or values returned."
              }
           },
           "required": [
             "Status"
           ]
        },
        "rpcError": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int64",
              "default": -32700,
              "description": "A number that indicates the error type that occurred."
            },
            "message": {
              "type": "string",
              "default": "Parse error",
              "description": "A string providing a short description of the error."
            },
            "data": {
              "type": "string",
              "default": "Error unmarshalling chaincode request payload: unexpected end of JSON input",
              "description": "A primitive or structured value that contains additional information about the error (e.g. detailed error information, nested errors etc.)."
            }
          },
          "required": [
            "code",
            "message"
          ]
        },
        "API": {
            "type": "object",
            "description": "The API for the tradelane sample contract consisting of the init function, the crud functions to change state, and a set of query functions for asset state, asset history, recent states, and so on.",
            "properties": {
                "init": {
                    "type": "object",
                    "description": "Initializes the contract when started, either by deployment or by peer restart.",
                    "properties": {
                        "method": "deploy",
                        "function": {
                            "type": "string",
                            "enum": [
                                "init"
                            ],
                            "description": "init function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/initEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "eventFlight": {
                    "type": "object",
                    "description": "Post a flight event to the contract. One argument, a JSON encoded event. The 'assetID' property is the target for the event, which is an aircraft in the case of the flight event.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "eventFlight"
                            ],
                            "description": "eventFlight function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/flightEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "eventInspection": {
                    "type": "object",
                    "description": "Post an inspection event to the contract. One argument, a JSON encoded event. The 'assetID' property is the target for the event, which is an assembly in the case of the inspection event.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "eventInspection"
                            ],
                            "description": "eventInspection function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/inspectionEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "eventAnalyticAdjustment": {
                    "type": "object",
                    "description": "Post an analytic adjustment event to the contract. One argument, a JSON encoded event. The 'assetID' property is the target for the event, which is an assembly in the case of the analytic adjustment event.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "eventAnalyticAdjustment"
                            ],
                            "description": "eventAnalyticAdjustment function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analyticAdjustmentEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "eventMaintenance": {
                    "type": "object",
                    "description": "Post a maintenance event to the contract. One argument, a JSON encoded event. The 'assetID' property is the target for the event, which is an assembly in the case of the maintenance event.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "eventMaintenance"
                            ],
                            "description": "eventMaintenance function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/maintenanceEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "createAssetAirline": {
                    "type": "object",
                    "description": "Create an airline asset. One argument, a JSON encoded event. The 'assetID' property is required with zero or more writable properties. Establishes an initial asset state.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAssetAirline"
                            ],
                            "description": "createAssetAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/airlineEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "createAssetAircraft": {
                    "type": "object",
                    "description": "Create an aircraft asset. One argument, a JSON encoded event. The 'assetID' property is required with zero or more writable properties. Establishes an initial asset state.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAssetAircraft"
                            ],
                            "description": "createAssetAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aircraftEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "createAssetAssembly": {
                    "type": "object",
                    "description": "Create an assembly asset. One argument, a JSON encoded event. The 'assetID' property is required with zero or more writable properties. Establishes an initial asset state.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAssetAssembly"
                            ],
                            "description": "createAssetAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assemblyEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "updateAssetAirline": {
                    "type": "object",
                    "description": "Update the state of an airline asset. The one argument is a JSON encoded event. The 'assetID' property is required along with one or more writable properties. Establishes the next asset state. ",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAssetAirline"
                            ],
                            "description": "updateAssetAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/airlineEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "updateAssetAircraft": {
                    "type": "object",
                    "description": "Update the state of an aircraft asset. The one argument is a JSON encoded event. The 'assetID' property is required along with one or more writable properties. Establishes the next asset state. ",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAssetAircraft"
                            ],
                            "description": "updateAssetAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aircraftEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "updateAssetAssembly": {
                    "type": "object",
                    "description": "Update the state of an assembly asset. The one argument is a JSON encoded event. The 'assetID' property is required along with one or more writable properties. Establishes the next asset state. ",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAssetAssembly"
                            ],
                            "description": "updateAssetAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assemblyEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAssetAirline": {
                    "type": "object",
                    "description": "Delete an airline asset, its history, and any recent state activity. Argument is a JSON encoded string containing only an 'assetID'.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAssetAirline"
                            ],
                            "description": "deleteAssetAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAssetAircraft": {
                    "type": "object",
                    "description": "Delete an aircraft asset, its history, and any recent state activity. Argument is a JSON encoded string containing only an 'assetID'.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAssetAircraft"
                            ],
                            "description": "deleteAssetAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAssetAssembly": {
                    "type": "object",
                    "description": "Delete an assembly asset, its history, and any recent state activity. Argument is a JSON encoded string containing only an 'assetID'.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAssetAssembly"
                            ],
                            "description": "deleteAssetAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deletePropertiesFromAssetAirline": {
                    "type": "object",
                    "description": "Delete one or more properties from an asset's state. Argument is a JSON encoded string containing an 'assetID' and an array of qualified property names. For example, in an event object containing common and custom properties objects, the argument might look like {'assetID':'A1',['common.location', 'custom.carrier', 'custom.temperature']} and the result of that invoke would be the removal of the location, carrier and temperature properties. The missing temperature would clear a 'OVERTEMP' alert when the rules engine runs.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAssetAirline"
                            ],
                            "description": "deletePropertiesFromAssetAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndPropertyArray"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deletePropertiesFromAssetAircraft": {
                    "type": "object",
                    "description": "Delete one or more properties from an asset's state. Argument is a JSON encoded string containing an 'assetID' and an array of qualified property names. For example, in an event object containing common and custom properties objects, the argument might look like {'assetID':'A1',['common.location', 'custom.carrier', 'custom.temperature']} and the result of that invoke would be the removal of the location, carrier and temperature properties. The missing temperature would clear a 'OVERTEMP' alert when the rules engine runs.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAssetAircraft"
                            ],
                            "description": "deletePropertiesFromAssetAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndPropertyArray"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deletePropertiesFromAssetAssembly": {
                    "type": "object",
                    "description": "Delete one or more properties from an asset's state. Argument is a JSON encoded string containing an 'assetID' and an array of qualified property names. For example, in an event object containing common and custom properties objects, the argument might look like {'assetID':'A1',['common.location', 'custom.carrier', 'custom.temperature']} and the result of that invoke would be the removal of the location, carrier and temperature properties. The missing temperature would clear a 'OVERTEMP' alert when the rules engine runs.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAssetAssembly"
                            ],
                            "description": "deletePropertiesFromAssetAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndPropertyArray"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAllAssetsAirline": {
                    "type": "object",
                    "description": "Delete the state of all assets. No arguments are accepted. For each managed asset, the state and history are erased, and the asset is removed if necessary from recent states.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssetsAirline"
                            ],
                            "description": "deleteAllAssetsAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "deleteAllAssetsAircraft": {
                    "type": "object",
                    "description": "Delete the state of all assets. No arguments are accepted. For each managed asset, the state and history are erased, and the asset is removed if necessary from recent states.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssetsAircraft"
                            ],
                            "description": "deleteAllAssetsAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "deleteAllAssetsAssembly": {
                    "type": "object",
                    "description": "Delete the state of all assets. No arguments are accepted. For each managed asset, the state and history are erased, and the asset is removed if necessary from recent states.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssetsAssembly"
                            ],
                            "description": "deleteAllAssetsAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "deleteWorldState": {
                    "type": "object",
                    "description": "DEBUGGING ONLY. Clears the the contents of world state for the contract. Every key and value is removed.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteWorldState"
                            ],
                            "description": "deleteWorldState function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "readAssetAirline": {
                    "type": "object",
                    "description": "Returns the state of an airline asset. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAirline"
                            ],
                            "description": "readAssetAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/state"
                        }
                    }
                },
                "readAssetAircraft": {
                    "type": "object",
                    "description": "Returns the state of an aircraft asset. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAircraft"
                            ],
                            "description": "readAssetAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/state"
                        }
                    }
                },
                "readAssetAircraftComplete": {
                    "type": "object",
                    "description": "Returns the state of an aircraft asset and all of its assemblies. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAircraftComplete"
                            ],
                            "description": "readAssetAircraftComplete function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/state"
                        }
                    }
                },
                "readAssetAssembly": {
                    "type": "object",
                    "description": "Returns the state of an assembly asset. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAssembly"
                            ],
                            "description": "readAssetAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDObj"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/state"
                        }
                    }
                },
                "readAllAssetsAirline": {
                    "type": "object",
                    "description": "Returns the state of all airline assets as an array of JSON encoded strings. Accepts no arguments. For each managed asset, the state is read from the ledger and added to the returned array. Array is sorted by 'assetID'.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssetsAirline"
                            ],
                            "description": "readAllAssetsAirline function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stateFilter"
                            },
                            "minItems": 0,
                            "maxItems": 1,
                            "description": "accepts one optional argument, a filter"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArray"
                        }
                    }
                },
                "readAllAssetsAircraft": {
                    "type": "object",
                    "description": "Returns the state of all aircraft assets as an array of JSON encoded strings. Accepts no arguments. For each managed asset, the state is read from the ledger and added to the returned array. Array is sorted by 'assetID'.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssetsAircraft"
                            ],
                            "description": "readAllAssetsAircraft function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stateFilter"
                            },
                            "minItems": 0,
                            "maxItems": 1,
                            "description": "accepts one optional argument, a filter"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArray"
                        }
                    }
                },
                "readAllAssetsAssembly": {
                    "type": "object",
                    "description": "Returns the state of all assembly assets as an array of JSON encoded strings. Accepts no arguments. For each managed asset, the state is read from the ledger and added to the returned array. Array is sorted by 'assetID'.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssetsAssembly"
                            ],
                            "description": "readAllAssetsAssembly function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stateFilter"
                            },
                            "minItems": 0,
                            "maxItems": 1,
                            "description": "accepts one optional argument, a filter"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArray"
                        }
                    }
                },
                "readAssetAirlineHistory": {
                    "type": "object",
                    "description": "Requests a specified number of history states for airline assets. Returns an array of states sorted with the most recent first. The 'assetID' property is required and the count property is optional. A missing count, a count of zero, or too large a count returns all existing history states.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAirlineHistory"
                            ],
                            "description": "readAssetAirlineHistory function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndCount"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readAssetAircraftHistory": {
                    "type": "object",
                    "description": "Requests a specified number of history states for aircraft assets. Returns an array of states sorted with the most recent first. The 'assetID' property is required and the count property is optional. A missing count, a count of zero, or too large a count returns all existing history states.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAircraftHistory"
                            ],
                            "description": "readAssetAircraftHistory function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndCount"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readAssetAssemblyHistory": {
                    "type": "object",
                    "description": "Requests a specified number of history states for assembly assets. Returns an array of states sorted with the most recent first. The 'assetID' property is required and the count property is optional. A missing count, a count of zero, or too large a count returns all existing history states.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetAssemblyHistory"
                            ],
                            "description": "readAssetAssemblyHistory function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDAndCount"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readAssetSchemas": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains APIs and Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSchemas"
                            ],
                            "description": "readAssetSchemas function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "string",
                            "description": "JSON encoded object containing selected schemas"
                        }
                    }
                },
                "readAssetSamples": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains sample Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSamples"
                            ],
                            "description": "readAssetSamples function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "string",
                            "description": "JSON encoded object containing selected sample data"
                        }
                    }
                },
                "readRecentStates": {
                    "type": "object",
                    "description": "Returns the state of recently updated assets as an array of objects sorted with the most recently updated asset first. Each asset appears exactly once up to a maxmum of 20 in this version of the contract.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readRecentStates"
                            ],
                            "description": "readRecentStates function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readContractState": {
                    "type": "object",
                    "description": "Returns the state of the contract, which includes its version, its nickname and a list of 'assetID's that are currently managed.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readContractState"
                            ],
                            "description": "readContractState function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/contractState"
                        }
                    }
                },
                "readWorldState": {
                    "type": "object",
                    "description": "DEBUGGING ONLY. Returns the the contents of world state for the contract. Every key and value is represented and pretty printed into the resulting map of objects.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readWorldState"
                            ],
                            "description": "readWorldState function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                },
                "readContractConfig": {
                    "type": "object",
                    "description": "Returns the contract's dynamic configuration -- those thresholds and values that can be set by external applications.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readContractConfig"
                            ],
                            "description": "readContractConfig function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/contractConfig"
                        }
                    }
                },
                "updateContractConfig": {
                    "type": "object",
                    "description": "Update the dynamic configuration for the contract. These can include thresholds and other values.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateContractConfig"
                            ],
                            "description": "updateContractConfig function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contractConfig"
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "setLoggingLevel": {
                    "type": "object",
                    "description": "Sets the logging level in the contract.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setLoggingLevel"
                            ],
                            "description": "setLoggingLevel function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "description": "A logging level for the fabric.",
                                "properties": {
                                    "logLevel": {
                                        "type": "string",
                                        "enum": [
                                            "CRITICAL",
                                            "ERROR",
                                            "WARNING",
                                            "NOTICE",
                                            "INFO",
                                            "DEBUG"                                    
                                        ]
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "setCreateOnUpdate": {
                    "type": "object",
                    "description": "Allow updateAsset to redirect to createAsset when 'assetID' does not exist.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setCreateOnUpdate"
                            ],
                            "description": "setCreateOnUpdate function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "description": "True to redirect on missing asset to create.",
                                "properties": {
                                    "setCreateOnUpdate": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                }
            }
        },
        "ChaincodeOpSuccess": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "result": {
                  "$ref": "#/definitions/rpcResponse",
                  "description": "The value of this element is determined by the method invoked on the server."
              },
              "id": {
                  "type": "integer",
                  "format": "int64",
                  "default": 123,
                  "description": "This number will be the same as the value of the id member in the request object."
              }
           },
           "required": [
              "jsonrpc",
              "result",
              "id"
           ]
        },
        "ChaincodeOpFailure": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "error": {
                 "$ref": "#/definitions/rpcError",
                 "description": "A structured value specifying the code and description of the error that occurred."
             },
             "id": {
                 "type": "integer",
                 "format": "int64",
                 "default": 123,
                 "description": "This number will be the same as the value of the id member in the request object. If there was an error detecting the id in the request object (e.g. Parse error/Invalid Request), it will be null."
             }
          },
          "required": [
            "jsonrpc",
            "error",
            "id"
          ]
        },
        "version": {
            "type": "string",
            "description": "The version number of the current contract"
        },
        "nickname": {
            "type": "string",
            "default": "TRADELANE",
            "description": "The nickname of the current contract"
        },
        "assetID": {
            "type": "string",
            "description": "The ID of a managed asset. The resource focal point for a smart contract."
        },
        "alertName": {
            "type": "string",
            "enum": [
                "ACHECK",
                "BCHECK",
                "HARDLANDING"
            ],
            "description": "These alerts signal a required inspection. Only the inspection event with an action of the same name can clear these alewrts."
        },
        "alertStatus": {
            "type": "object",
            "description": "Active means that the alert is in force in this state. Raised means that the alert became active as the result of the event that generated this state. Cleared means that the alert became inactive as the result of the event that generated this state.",
            "properties": {
                "active": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                },
                "raised": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                },
                "cleared": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                }
            }
        },
        "geo": {
            "description": "A geographical coordinate",
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "assetIDAndCount": {
            "type": "object",
            "description": "Requested 'assetID' with item 'count'.",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            },
            "required": [
                "assetID"
            ]
        },
        "stateFilter": {
            "type": "object",
            "description": "A state filter consists of a match mode and an array of k:v pairs with the key being a qualified property name and the value being the value to match. Match modes are one of matchany, matchall and matchnone.",
            "properties": {
                "matchmode": {
                    "type": "string",
                    "description": "Match modes are any, all and none. For any, the entire list of properties must be present and the values match. For any, only one must be present with a matching value. For none, all must be absent or have a non-matching value.",
                    "enum": [
                        "matchall",
                        "matchany",
                        "matchnone"
                    ]
                },
                "entries": {
                    "type":"array",
                    "description": "Array of qualified propery name and value pairs.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "qprop": {
                                "type": "string",
                                "description": "A qualified property as dot separated levels terminated by a leaf node. An example would be 'common.assetID'."
                            },
                            "value": {
                                "type": "string",
                                "description": "The value to be compared."
                            }
                        }
                    }
                }
            }
        },
        "assetIDObj": {
            "type": "object",
            "description": "Requested 'assetID' in an object.",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            },
            "required": [
                "assetID"
            ]
        },
        "qualPropertyNameArray": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "The qualified name of a property. E.g. 'event.common.carrier', 'event.custom.temperature', etc." 
            }
        },
        "assetIDAndPropertyArray": {
            "type": "object",
            "description": "Requested 'assetID' with a list of qualified property names.",
            "properties": {
                "qualPropsToDelete": {
                    "$ref": "#/definitions/qualPropertyNameArray"
                },
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            },
            "required": [
                "assetID",
                "qualPropsToDelete"
            ]
        },
        "eventWithFunction": {
            "type": "object",
            "description": "function and string parameter that created this state object",
            "properties": {
                "arg": {
                    "$ref": "#/definitions/event"
                },
                "function": {
                    "type": "string",
                    "description": "function that created this state object"
                },
                "redirectedFromFunction": {
                    "type": "string",
                    "description": "function that originally received the event"
                }
            }
        },
        "initEvent": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/assetID"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                }
            },
            "required": [
                "version"
            ],
            "description": "event sent to init on deployment"
        },
        "airline": {
            "type": "object",
            "description": "The writable properties for an airline",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the airline."
                },
                "code": {
                    "type": "string",
                    "description": "The airline 3 letter code."
                }
            }
        },
        "airlineEvent": {
            "type": "object",
            "description": "The airline CRUD event",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "airline": {
                    "$ref": "#/definitions/airline"
                }
            }
        },
        "airlineState": {
            "type": "object",
            "description": "An airline state",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "airline": {
                    "$ref": "#/definitions/airline"
                }
            }
        },
        "aircraft": {
            "type": "object",
            "description": "Writable properties for an aircraft. Note that assetID is the aircraft serial number.",
            "properties": {
                "airline": {
                    "type": "string",
                    "description": "AssetID of airline that owns this airplane"
                },
                "operator": {
                    "type": "string",
                    "description": "AssetID of operator that flies this airplane"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "Aircraft serial number (manufacturer assigned)"
                },
                "tailNumber": {
                    "type": "string",
                    "description": "Aircraft tail number (airline assigned)"
                },
                "model": {
                    "type": "string",
                    "description": "Aircraft model -- e.g. 737-5H4"
                },
                "variant": {
                    "type": "string",
                    "description": "Aircraft model variant -- e.g. B735"
                },
                "code": {
                    "type": "string",
                    "description": "Aircraft code -- e.g. WN / SWA"
                },
                "mode-s": {
                    "type": "string",
                    "description": "Aircraft transponder response -- e.g.  A68E4A"
                },
                "dateOfBuild": {
                    "type": "string",
                    "description": "Aircraft build completed / in service date"
                }
            }
        },
        "aircraftEvent": {
            "type": "object",
            "description": "The aircraft CRUD event",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "aircraft": {
                    "$ref": "#/definitions/aircraft"
                }
            }
        },
        "aircraftState": {
            "type": "object",
            "description": "An aircraft state",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "aircraft": {
                    "$ref": "#/definitions/aircraft"
                },
                "assemblies": {
                    "type": "array",
                    "description": "*Internal prefixed* assetIDs of assemblies that are mounted on this airplane",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                },
                "age": {
                    "type": "string",
                    "description": "Aircraft age, computed as today's date minus DOB"
                },
                "cycles": {
                    "type": "number",
                    "description": "Total number of cycles for this aircraft"
                },
                "adjustedCycles": {
                    "type": "integer",
                    "description": "Cycles plus analytic adjustments for this aircraft."
                }
            }
        },
        "assembly": {
            "type": "object",
            "description": "The set of writable properties that define an assembly. Note that assetID is the assembly serial number",
            "properties": {
                "serialNumber": {
                    "type": "string",
                    "description": "Assembly identifier assigned by manufacturer"
                },
                "ataCode": {
                    "type": "string",
                    "description": "The ATA code defining the assembly type, e.g. 32=landing gear, 32-50=steering."
                },
                "name": {
                    "type": "string",
                    "description": "The assembly name."
                },
                "arlsZone": {
                    "type": "string",
                    "description": "tbd"
                },
                "lifeLimitInitial": {
                    "type": "integer",
                    "description": "Initial assembly life limit."
                }
            },
            "required": [
                "serialNumber",
                "ataCode",
                "name"
            ]
        },
        "assemblyEvent": {
            "type": "object",
            "description": "The assembly event. Note that assetID is the assembly serial number",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "assembly": {
                    "$ref": "#/definitions/assembly"
                }
            }
        },
        "assemblyState": {
            "type": "object",
            "description": "The set of writable properties that define an assembly's state.",
            "properties": {
                "common": {
                    "$ref": "#/definitions/iotCommon"
                },
                "assembly": {
                    "$ref": "#/definitions/assembly"
                },
                "maintenance": {
                    "$ref": "#/definitions/maintenance"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "new",
                        "aircraft",
                        "inventory",
                        "maintenance",
                        "scrapped"
                    ]
                },
                "aircraft": {
                    "type": "string",
                    "description": "The assetID of the aircraft on which this assembly is mounted. Blank if removed for maintenance."
                },
                "cycles": {
                    "type": "integer",
                    "description": "Lifetime cycle count for this assembly."
                },
                "adjustedCycles": {
                    "type": "integer",
                    "description": "Cycles plus analytic adjustments for this assembly."
                },
                "aCheckCounter": {
                    "type": "number",
                    "description": "The total cycles since last reset. Used as a baseline against which to compare adjusted cycles based on analytic inputs."
                },
                "aCheckCounterAdjusted": {
                    "type": "number",
                    "description": "ACheckCounter plus analytic adjustments. Can be larger or smaller than aCheckCounter. Used for rule calculations."
                },
                "bCheckCounter": {
                    "type": "number",
                    "description": "The total cycles since last reset. Used as a baseline against which to compare adjusted cycles based on analytic inputs."
                },
                "bCheckCounterAdjusted": {
                    "type": "number",
                    "description": "BCheckCounter plus analytic adjustments. Can be larger or smaller than aCheckCounter. Used for rule calculations."
                }
            },
            "required": [
                "ATAcode",
                "name"
            ]
        },
        "part": {
            "type": "object",
            "description": "TBD -- placeholder for now.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The part name."
                },
                "number": {
                    "type": "string",
                    "description": "Part number, unique to a specific design iteration."
                },
                "serialNumber": {
                    "type": "string",
                    "description": "Part serial number, unique to an individual part."
                },
                "vendorName": {
                    "type": "string",
                    "description": "Vendor name."
                },
                "vendorNumber": {
                    "type": "string",
                    "description": "Vendor part number."
                },
                "lifeLimitInitial": {
                    "type": "integer",
                    "description": "Initial part life limit."
                },
                "lifeLimitUsed": {
                    "type": "integer",
                    "description": "Part life limit that has been used, including adjustments."
                }
            },
            "required": [
                "partNumber",
                "name"
            ]
        },
        "flight": {
            "type": "object",
            "description": "A takeoiff and a landing",
            "properties": {
                "aircraft": {
                    "type": "string",
                    "description": "Aircraft tail or serial number (tbd)"
                },
                "flightnumber": {
                    "type": "string",
                    "description": "A flight number"
                },
                "from": {
                    "type": "string",
                    "description": "3 letter code of originating airport"
                },
                "to": {
                    "type": "string",
                    "description": "3 letter code of terminating airport"
                },
                "std": {
                    "type": "string",
                    "description": "standard time departure"
                },
                "atd": {
                    "type": "string",
                    "description": "actual time departure"
                },
                "sta": {
                    "type": "string",
                    "description": "standard time arrival"
                },
                "landingType": {
                    "type": "string",
                    "description": "code defining landing quality??"
                },
                "hardlanding": {
                    "type": "boolean",
                    "description": "landing considered hard by pilot or aircraft sensor"
                },
                "analyticHardlanding": {
                    "type": "boolean",
                    "description": "landing considered hard by analytics"
                },
                "gForce": {
                    "type": "number",
                    "description": "force incurred on landing"
                }
            }
        },
        "flightEvent": {
            "type": "object",
            "description": "flight event, assetID defines airplane against which the event occurred",
            "properties": {
                "flight": {
                    "$ref": "#/definitions/flight"
                }
            }
        },
        "inspection": {
            "type": "object",
            "description": "indicates that an inspection has occured for this assembly",
            "properties": {
                "assembly": {
                    "type": "string",
                    "description": "assembly serial number"
                },
                "action": {
                    "type": "string",
                    "description": "inspection that has been performed",
                    "enum": [
                        "ACHECK",
                        "BCHECK",
                        "HARDLANDING"
                    ]
                }
            }
        },
        "inspectionEvent": {
            "type": "object",
            "description": "An inspection has been performed against a specific assembly. Will clear one or more alerts and reset their counters.",
            "properties": {
                "inspection": {
                    "$ref": "#/definitions/inspection"
                }
            }
        },
        "analyticAdjustment": {
            "type": "object",
            "description": "An adjustment based on analytical analysis to the assembly's cycle counters, which translates to changes to life limit *used*. Positive number indicates that the assembly has used more of its life, negative number indicates that the assembly has been granted a bit more life based on conditions such as weather, landing gForces, runway roughness and so on.",
            "properties": {
                "assembly": {
                    "type": "string",
                    "description": "Assembly serial number"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "adjustLifeLimit"
                    ]
                },
                "amount": { "type": "number"},
                "reason": { "type": "string" }
            }
        },
        "analyticAdjustmentEvent": {
            "type": "object",
            "description": "analytic adjustment event, assetid defines the assembly receiving the adjustment",
            "properties": {
                "analyticAdjustment": {
                    "$ref": "#/definitions/analyticAdjustment"
                }
            }
        },
        "maintenance": {
            "type": "object",
            "description": "Maintenance consists of installation of an assembly onto an aircraft or uninstallation of same. When an assembly is not installed on an aircraft, it is said to be in inventory or in maintenance. Thus, there is a status on assemblies showing that.",
            "properties": {
                "assembly": {
                    "type": "string",
                    "description": "This assembly's serial number"
                },
                "action": {
                    "type": "string",
                    "enum": [
                        "commission",
                        "install",
                        "uninstall",
                        "startMaintenance",
                        "endMaintenance",
                        "scrap"
                    ]
                },
                "aircraft": { 
                    "type": "string",
                    "description": "The serial number of the aircraft to / from which the assembly has been installed / uninstalled."
                },
                "note": {
                    "type": "string",
                    "description": "Maintenance note for this action. Overwritten whenever a new note property is inserted into the maintenance sub-event."
                }
            },
            "required": [
                "assembly",
                "action"
            ]
        },
        "maintenanceEvent": {
            "type": "object",
            "description": "maintenance event",
            "properties": {
                "maintenance": {
                    "$ref": "#/definitions/maintenance"
                }
            }
        },
        "eventName": {
            "description": "Defines an event that is related to an asset. The complete list is in the enum property.",
            "type": "string",
            "enum": [
                "flight",
                "inspection",
                "analyticAdjustment"
            ]
        },
        "assetName": {
            "description": "Defines an asset that is handled by this smart contract. The complete list is in the enum property. Assets follow the 'partial state as event' pattern, which includes deep merging into the asset state when updating.",
            "type": "string",
            "enum": [
                "airline",
                "aircraft",
                "assembly"
            ]
        },
        "iotCommon": {
            "type": "object",
            "description": "The set of common properties for any event to a contract that adheres to the IoT contract pattern 'partial state as event' for assets and that may have pure events that are *about* these assets.",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Optional device timestamp. Note that the contract retains the blockchain-assigned transaction UUID and timestamp, which reflect the time that the event arrived at the Hyperledger fabric. The device timestamp has meaning that is relevant to the device, asset and application context."
                },
                "location": {
                    "$ref": "#/definitions/geo"
                },
                "extension": {
                    "type": "array",
                    "description": "Application managed array of extension properties. Opaque to contract. To be used in emergencies or for sidecar information that is not relevant to contract rule processing.",
                    "minItems": 0,
                    "items": { "type": "object", "properties": {} }
                },
                "references": {
                    "type": "array",
                    "description": "An array of external references relevant to this asset.",
                    "minItems": 0,
                    "items": { "type": "string" }
                }
            },
            "required": [
                "assetID"
            ]
        },
        "event": {
            "type": "object",
            "description": "A set of properties that constitute a message to the contract.",
            "properties": {
                "iotCommon": { "$ref": "#/definitions/iotCommon" },
                "oneOf": {
                    "airline": { "$ref": "#/definitions/airlineEvent" },
                    "aircraft": { "$ref": "#/definitions/aircraftEvent" },
                    "assembly": { "$ref": "#/definitions/assemblyEvent" },
                    "flight": { "$ref": "#/definitions/flightEvent" },
                    "inspection": { "$ref": "#/definitions/inspectionEvent" },
                    "analyticAdjustment": { "$ref": "#/definitions/analyticAdjustmentEvent" },
                    "maintenance": { "$ref": "#/definitions/maintenanceEvent" }
                }
            }
        },
        "state": {
            "type": "object",
            "description": "A set of properties that constitute a complete asset state. Includes event properties and any other calculated properties such as compliance related alerts.",
            "properties": {
                "iotCommon": { "$ref": "#/definitions/iotCommon" },
                "oneOf": {
                    "airline": { "$ref": "#/definitions/airline" },
                    "aircraft": { "$ref": "#/definitions/aircraft" },
                    "assembly": { "$ref": "#/definitions/assembly" }
                },
                "txntimestamp": {
                    "type": "string",
                    "description": "Transaction timestamp matching that in the blockchain."
                },
                "txnuuid": {
                    "type": "string",
                    "description": "Transaction UUID matching that in the blockchain."
                },
                "compliant": {
                    "type": "boolean",
                    "description": "A contract-specific indication that this asset is compliant."
                },
                "alerts": {
                    "$ref": "#/definitions/alertStatus"
                },
                "lastEvent": {
                    "$ref": "#/definitions/eventWithFunction"
                }
            }
        },
        "stateArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/state"
            },
            "minItems": 0,
            "description": "an array of states, often for different assets"
        },
        "stateArrayRecentFirst": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/state"
            },
            "minItems": 0,
            "description": "an array of states for one asset sorted by timestamp with the most recent entry first"
        },
        "stateArrayRecentFirstMap": {
            "type": "Object",
            "description": "",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                },
                "statesRecentFirst": {
                    "$ref": "#/definitions/stateArrayRecentFirst"
                }                
            }
        },
        "contractState": {
            "type": "object",
            "description": "Contract state consisting of its version and nickname.",
            "properties": {
                "version": {
                    "$ref": "#/definitions/version"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                }
            }
        },
        "contractConfig": {
            "type": "object",
            "description": "Dynamic configuration for this contract, consisting of thresholds for alerts.",
            "properties": {
                "aCheckThreshold": {
                    "type": "number",
                    "description": "Cycles threshold for the aCheck inspection alert."
                },
                "bCheckThreshold": {
                    "type": "number",
                    "description": "Cycles threshold for the bCheck inspection alert."
                }
            }
        }
    }
}